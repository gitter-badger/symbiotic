/**
 * Copyright(c) 2015 Knut Petter Meen, all rights reserved.
 */
package net.scalytica.symbiotic.logger

import scala.annotation.elidable
import scala.annotation.elidable._

trait Logger {
  /*
   * Use @elidable annotation to completely exclude functions from the compiler generated byte-code based on
   * the specified level. In a production build most logging functions will simply disappear with no runtime
   * performance penalty.
   *
   * Specify level as a compiler parameter
   * > scalac -Xelide-below INFO
  */
  @elidable(FINEST) def trace(msg: Any, e: Exception): Unit
  @elidable(FINEST) def trace(msg: Any): Unit
  @elidable(FINE) def debug(msg: Any, e: Exception): Unit
  @elidable(FINE) def debug(msg: Any): Unit
  @elidable(INFO) def info(msg: Any, e: Exception): Unit
  @elidable(INFO) def info(msg: Any): Unit
  @elidable(WARNING) def warn(msg: Any, e: Exception): Unit
  @elidable(WARNING) def warn(msg: Any): Unit
  @elidable(SEVERE) def error(msg: Any, e: Exception): Unit
  @elidable(SEVERE) def error(msg: Any): Unit
  @elidable(SEVERE) def fatal(msg: Any, e: Exception): Unit
  @elidable(SEVERE) def fatal(msg: Any): Unit

  def enableServerLogging(url: String): Unit
  def disableServerLogging(): Unit
}

object LoggerFactory {
  private[logger] def createLogger(name: String) = {}

  val consoleAppender = new BrowserConsoleAppender
  val popupAppender = new PopUpAppender

  /**
   * Create a logger that outputs to browser console
   */
  def getLogger(name: String): Logger = {
    val nativeLogger = Log4JavaScript.log4javascript.getLogger(name)
    nativeLogger.addAppender(consoleAppender)
    new L4JSLogger(nativeLogger)
  }

  /**
   * Create a logger that outputs to a separate popup window
   */
  def getPopUpLogger(name: String): Logger = {
    val nativeLogger = Log4JavaScript.log4javascript.getLogger(name)
    nativeLogger.addAppender(popupAppender)
    new L4JSLogger(nativeLogger)
  }
}