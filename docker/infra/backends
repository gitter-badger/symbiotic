#!/bin/bash

CURR_DIR=`pwd`

CMD=$1
FLAG=$2

function prepareMongo() {
  VOLUME_DIR_NAME=".mongodb-files"
  export DB_VOLUME_PATH="$CURR_DIR/$VOLUME_DIR_NAME"

  echo "Checking for $VOLUME_DIR_NAME..."

  if [ -d $DB_VOLUME_PATH ]
  then
    echo "Found $VOLUME_DIR_NAME."
  else
    echo "Could not find $VOLUME_DIR_NAME. Creating..."
    mkdir $DB_VOLUME_PATH
    echo "$VOLUME_DIR_NAME created."

    echo "IMPORTANT: This will be the first time MongoDB is started. Remember to"
    echo "initialise the replica set! This script will attempt to initialize it"
    echo "for you. If it should fail, you try doing it manually with these steps:"
    echo "  1. docker exec -it symbiotic-mongo mongo"
    echo "  2. rs.initiate() - will init the replica set"
    echo "  3. rs.status() - to verify the replica set is created"
    echo ""
  fi

  echo "Will use $DB_VOLUME_PATH as a mounted volume when starting Docker."
}
function preClean() {
  echo "Removing old containers..."
  docker rm infra_gateway_1 infra_postgres_1 infra_mongo_1 infra_elasticsearch_1
  echo "Removing previously built image for client..."
}

function remDangling() {
  echo "Removing dangling temporary images..."
  docker images -q --filter "dangling=true" | xargs docker rmi
}

function start() {
  remDangling
  prepareMongo
  echo "Starting docker-compose build..."
  docker-compose up -d --build --force-recreate --remove-orphans
}

function stop() {
  cd $CURR_DIR
  echo "Stopping services..."
  docker-compose stop
}

function clean() {
  stop
  preClean
  remDangling
}

function status {
  MONGODB_EXISTS=$( docker ps --quiet --filter name=infra_mongo_1 )
  PGSQL_EXISTS=$( docker ps --quiet --filter name=infra_postgres_1 )
  ELASTIC_EXISTS=$( docker ps --quiet --filter name=infra_elasticsearch_1 )

  if [[ -n "$MONGODB_EXISTS" ]]; then
    echo -e "MongoDB       \033[1;32m up\033[0;0m"
  else
    echo -e "MongoDB       \033[1;31m down\033[0;0m"
  fi
  if [[ -n "$PGSQL_EXISTS" ]]; then
    echo -e "PostgreSQL    \033[1;32m up\033[0;0m"
  else
    echo -e "PostgreSQL    \033[1;31m down\033[0;0m"
  fi
  if [[ -n "$ELASTIC_EXISTS" ]]; then
    echo -e "ElasticSearch \033[1;32m up\033[0;0m"
  else
    echo -e "ElasticSearch \033[1;31m down\033[0;0m"
  fi
}

if [ "$CMD" = "start" ]; then
  start

elif [ "$CMD" = "stop" ]; then
  stop

elif [ "$CMD" = "clean" ]; then
  clean

elif [ "$CMD" = "restart" ]; then
  stop
  preClean
  start

elif [ "$CMD" = "status" ]; then
  echo "Backend container status:"
  status

else
  echo "Usage: $ backends <start | stop | restart | clean | status>"
fi